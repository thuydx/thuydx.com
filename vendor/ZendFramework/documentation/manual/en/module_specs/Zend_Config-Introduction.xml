<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xml:id="zend.config.introduction">
    <info><title>Introduction</title></info>

    <para>
        <classname>Zend\Config</classname> is designed to simplify the access to, and the use of,
        configuration data within applications. It provides a nested object property based user
        interface for accessing this configuration data within application code. The configuration
        data may come from a variety of media supporting hierarchical data storage. Currently
        <classname>Zend\Config</classname> provides adapters for read and write configuration data that are stored
        in Ini or XML files.
    </para>

    <example xml:id="zend.config.introduction.example.using">
        <info><title>Using Zend\Config</title></info>

        <para>
            Normally it is expected that users would use one of the reader classes to read a configuration file using <link linkend="zend.config.reader.ini"><classname>Zend\Config\Reader\Ini</classname></link> or
            <link linkend="zend.config.reader.xml"><classname>Zend\Config\Reader\Xml</classname></link>,
            but if configuration data are available in a <acronym>PHP</acronym> array, one may
            simply pass the data to the <classname>Zend\Config\Config</classname> constructor in order to
            utilize a simple object-oriented interface:
        </para>

        <programlisting language="php"><![CDATA[
// Given an array of configuration data
$configArray = array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);

// Create the object-oriented wrapper upon the configuration data
$config = new Zend\Config\Config($configArray);

// Print a configuration datum (results in 'www.example.com')
echo $config->webhost;

]]></programlisting>
    </example>

    <para>
        As illustrated in the example above, <classname>Zend\Config\Config</classname> provides nested
        object property syntax to access configuration data passed to its constructor.
    </para>

    <para>
        Along with the object oriented access to the data values,
        <classname>Zend\Config\Config</classname> also has <methodname>get()</methodname> which will
        return the supplied default value if the data element doesn't exist. For example:
    </para>

    <programlisting language="php"><![CDATA[
$host = $config->database->get('host', 'localhost');
]]>
</programlisting>

    <example xml:id="zend.config.introduction.example.file.php">
        <info><title>Using Zend\Config\Config with a PHP Configuration File</title></info>

        <para>
            It is often desirable to use a pure <acronym>PHP</acronym>-based configuration file.
            The following code illustrates how easily this can be accomplished:
        </para>

        <programlisting language="php"><![CDATA[
// config.php
return array(
    'webhost'  => 'www.example.com',
    'database' => array(
        'adapter' => 'pdo_mysql',
        'params'  => array(
            'host'     => 'db.example.com',
            'username' => 'dbuser',
            'password' => 'secret',
            'dbname'   => 'mydatabase'
        )
    )
);
]]></programlisting>

        <programlisting language="php"><![CDATA[
// Configuration consumption
$config = new Zend\Config\Config(include 'config.php');

// Print a configuration datum (results in 'www.example.com')
echo $config->webhost;
]]></programlisting>
    </example>
</section>
