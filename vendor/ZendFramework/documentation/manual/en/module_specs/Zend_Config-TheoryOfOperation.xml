<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.config.theory_of_operation">
    <info><title>Theory of Operation</title></info>

    <para>
        Configuration data are made accessible to the <classname>Zend\Config\Config</classname> constructor
        through an associative array, which may be multi-dimensional, in order to support
        organizing the data from general to specific. Concrete adapter classes
        adapt configuration data from storage to produce the associative array for the
        <classname>Zend\Config\Config</classname> constructor. User scripts may provide such arrays
        directly to the <classname>Zend\Config\Config</classname> constructor, without using a reader
        class, since it may be appropriate to do so in certain situations.
    </para>

    <para>
        Each configuration data array value becomes a property of the
        <classname>Zend\Config\Config</classname> object. The key is used as the property name. If a value
        is itself an array, then the resulting object property is created as a new
        <classname>Zend\Config\Config</classname> object, loaded with the array data. This occurs
        recursively, such that a hierarchy of configuration data may be created with any number of
        levels.
    </para>

    <para>
        <classname>Zend\Config\Config</classname> implements the <emphasis>Countable</emphasis> and
        <emphasis>Iterator</emphasis> interfaces in order to facilitate simple access to
        configuration data. Thus, one may use the
        <link xlink:href="http://php.net/count"><methodname>count()</methodname></link>
        function and <acronym>PHP</acronym> constructs such as
        <link xlink:href="http://php.net/foreach"><emphasis>foreach</emphasis></link> with
        <classname>Zend\Config\Config</classname> objects.
    </para>

    <para>
        By default, configuration data made available through <classname>Zend\Config\Config</classname> are
        read-only, and an assignment (e.g.,
        <command>$config-&gt;database-&gt;host = 'example.com';</command>)
        results in a thrown exception. This default behavior may be overridden through the
        constructor, however, to allow modification of data values. Also, when modifications are
        allowed, <classname>Zend\Config\Config</classname> supports unsetting of values (i.e.
        <methodname>unset($config-&gt;database-&gt;host)</methodname>). The
        <methodname>isReadOnly()</methodname> method can be used to determine if modifications to a
        given <classname>Zend\Config\Config</classname> object are allowed and the
        <methodname>setReadOnly()</methodname> method can be used to stop any further modifications
        to a <classname>Zend\Config\Config</classname> object that was created allowing modifications.
    </para>

    <note>
        <info><title>Modifying Config does not save changes</title></info>

        <para>
            It is important not to confuse such in-memory modifications with saving
            configuration data out to specific storage media. Tools for creating and modifying
            configuration data for various storage media are out of scope with respect to
            <classname>Zend\Config\Config</classname>. Third-party open source solutions are readily
            available for the purpose of creating and modifying configuration data for various
            storage media.
        </para>
    </note>

    <para>
        If you have two <classname>Zend\Config\Config</classname> objects, you can merge them into a single
        object using the <methodname>merge()</methodname> function. For example, given
        <varname>$config</varname> and <varname>$localConfig</varname>, you can merge data from
        <varname>$localConfig</varname> to <varname>$config</varname> using
        <command>$config-&gt;merge($localConfig);</command>. The items in
        <varname>$localConfig</varname> will override any items with the same name in
        <varname>$config</varname>.
    </para>

    <note>
        <para>
            The <classname>Zend\Config\Config</classname> object that is performing the merge must have
            been constructed to allow modifications, by passing <constant>TRUE</constant> as the
            second parameter of the constructor. The <methodname>setReadOnly()</methodname>
            method can then be used to prevent any further modifications after the merge is
            complete.
        </para>
    </note>
</section>
