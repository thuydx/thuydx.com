<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.mvc.quick-start">
  <info><title>Quick Start</title></info>

  <para>
    Now that you know the basics of how applications and modules are
    structured, we'll show you the easy way to get started.
  </para>

  <section xml:id="zend.mvc.quick-start.install">
    <info><title>Install the Zend Skeleton Application</title></info>

    <para>
      The easiest way to get started is to grab the sample application
      and module repositories. This can be done in the following ways.
    </para>

    <section xml:id="zend.mvc.quick-start.install.using-git">
      <info><title>Using Git</title></info>

      <para>
        Simply clone the <classname>ZendSkeletonApplication</classname>
        repository, using the <varname>--recursive</varname> option, which
        will also grab ZF.
      </para>

      <programlisting language="php"><![CDATA[
prompt> git clone --recursive git://github.com/zendframework/ZendSkeletonApplication.git my-application
]]></programlisting>
    </section>

    <section xml:id="zend.mvc.quick-start.install.manual-installation">
      <info><title>Manual installation</title></info>

      <itemizedlist>
        <listitem>
          <para>
            Download a tarball of the
            <classname>ZendSkeletonApplication</classname> repository:
          </para>

          <itemizedlist>
            <listitem>
              <para>
                  Zip: <link xlink:href="https://github.com/zendframework/ZendSkeletonApplication/zipball/master">https://github.com/zendframework/ZendSkeletonApplication/zipball/master</link>
              </para>
            </listitem>

            <listitem>
              <para>
                Tarball: <link xlink:href="https://github.com/zendframework/ZendSkeletonApplication/tarball/master">https://github.com/zendframework/ZendSkeletonApplication/tarball/master</link>
              </para>
            </listitem>
          </itemizedlist>
        </listitem>

        <listitem>
          <para>
            Deflate the archive you selected and rename the parent directory
            according to your project needs; we use "my-application"
            throughout this document.
          </para>
        </listitem>

        <listitem>
          <para>
            Install Zend Framework, and either have its library on your PHP
            <varname>include_path</varname>, symlink the library into your
            project's "library", or install it directly into your
            application using Pyrus.
          </para>
        </listitem>
      </itemizedlist>
    </section>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-new-module">
    <info><title>Create a new module</title></info>

    <para>
      By default, one module is provided with the
      <classname>ZendSkeletonApplication</classname>, named
      "Application". It provides the following:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          A view listener that will render views based on the selected
          controller, and inject it into a site layout.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Typically, you will not need to touch this other than to provide an
      alternate entry page for your site and/or alternate error page.
    </para>

    <para>
      Additional functionality will be provided by creating new modules.
    </para>

    <para>
      To get you started with modules, we recommend using the
      <classname>ZendSkeletonModule</classname> as a base. Download it from
      here:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Zip: <link xlink:href="https://github.com/zendframework/ZendSkeletonModule/zipball/master">https://github.com/zendframework/ZendSkeletonModule/zipball/master</link>
        </para>
      </listitem>

      <listitem>
        <para>
          Tarball: <link xlink:href="https://github.com/zendframework/ZendSkeletonModule/tarball/master">https://github.com/zendframework/ZendSkeletonModule/tarball/master</link>
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Deflate the package, and rename the directory
      "ZendSkeletonModule" to reflect the name of the new
      module you want to create; when done, move the module into your new
      project's <filename>modules/</filename> directory.
    </para>

    <para>
      At this point, it's time to create some functionality.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.update-the-module-class">
    <info><title>Update the Module class</title></info>

    <para>
      Let's update the module class. We'll want to make sure the
      namespace is correct, configuration is enabled and returned, and
      that we setup autoloading on initialization. Since we're actively
      working on this module, the class list will be in flux, we probably
      want to be pretty lenient in our autoloading approach, so let's
      keep it flexible by using the
      <classname>StandardAutoloader</classname>. Let's begin.
    </para>

    <para>
      First, let's have <filename>autoload_classmap.php</filename> return
      an empty array:
    </para>

    <programlisting language="php"><![CDATA[
<?php
// autoload_classmap.php
return array();
]]></programlisting>

    <para>
      We'll also edit our <filename>config/module.config.php</filename>
      file to read as follows:
    </para>

    <programlisting language="php"><![CDATA[
return array(
    'di' => array(
        'instance' => array(
            'alias' => array(
            ),
            'Zend\View\TemplatePathStack' => array('parameters' => array(
                'paths'  => array(
                    '<module-name>' => __DIR__ . '/../views',
                ),
            )),
        ),
    ),
);
]]></programlisting>

    <para>
      Fill in "module-name" with a lowercased, dash-separated
      version of your module name -- e.g., "ZendUser" would
      become "zend-user".
    </para>

    <para>
      Next, edit the <filename>Module.php</filename> file to read as
      follows:
    </para>

    <programlisting language="php"><![CDATA[
namespace <your module name here>;

use Zend\Module\Consumer\AutoloaderProvider;

class Module implements AutoloaderProvider
{
    public function getAutoloaderConfig()
    {
        return array(
            'Zend\Loader\ClassMapAutoloader' => array(
                __DIR__ . '/autoload_classmap.php',
            ),
            'Zend\Loader\StandardAutoloader' => array(
                'namespaces' => array(
                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,
                ),
            ),
        );
    }

    public function getConfig()
    {
        return include __DIR__ . '/config/module.config.php';
    }
}
]]></programlisting>

    <para>
      At this point, you now have your module configured properly. Let's
      create a controller!
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-controller">
    <info><title>Create a Controller</title></info>

    <para>
      Controllers are simply objects that implement
      <classname>Zend\Stdlib\Dispatchable</classname>. This means they simply
      need to implement a <methodname>dispatch()</methodname> method that takes
      minimally a <classname>Response</classname> object as an argument.
    </para>

    <para>
      In practice, though, this would mean writing logic to branch based
      on matched routing within every controller. As such, we've created
      two base controller classes for you to start with:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <classname>Zend\Mvc\Controller\ActionController</classname> allows
          routes to match an "action". When matched, a method named
          after the action will be called by the controller. As an example,
          if you had a route that returned "foo" for the
          "action" key, the "fooAction" method would be
          invoked.
        </para>
      </listitem>

      <listitem>
        <para>
          <classname>Zend\Mvc\Controller\RestfulController</classname>
          introspects the Request to determine what HTTP method was used, and
          calls a method based on that accordingly.
        </para>

        <itemizedlist>
          <listitem>
            <para>
              <varname>GET</varname> will call either the
              <methodname>getList()</methodname> method, or, if an "id" was
              matched during routing, the <methodname>get()</methodname> method (with
              that identifer value).
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>POST</varname> will call the <methodname>create()</methodname>
              method, passing in the <varname>$_POST</varname> values.
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>PUT</varname> expects an "id" to be matched
              during routing, and will call the <methodname>update()</methodname>
              method, passing in the identifier, and any data found in the raw
              post body.
            </para>
          </listitem>

          <listitem>
            <para>
              <varname>DELETE</varname> expects an "id" to be matched
              during routing, and will call the <methodname>delete()</methodname>
              method.
            </para>
          </listitem>
        </itemizedlist>
      </listitem>
    </itemizedlist>

    <para>
      To get started, we'll simply create a "hello world" style
      controller, with a single action. First, create the directory
      <filename>src/&lt;module name&gt;/Controller</filename>, and then
      create the file <filename>HelloController.php</filename> inside it.
      Edit it in your favorite text editor or IDE, and insert the
      following contents:
    </para>

    <programlisting language="php"><![CDATA[
<?php
namespace <module name>\Controller;

use Zend\Mvc\Controller\ActionController,
    Zend\View\Model\ViewModel;

class HelloController extends ActionController
{
    public function worldAction()
    {
        $message = $this->getRequest()->query()->get('message', 'foo');
        return new ViewModel(array('message' => $message));
    }
}
]]></programlisting>

    <para>
      So, what are we doing here?
    </para>

    <itemizedlist>
      <listitem>
        <para>
          We're creating an action controller.
        </para>
      </listitem>

      <listitem>
        <para>
          We're defining an action, "world".
        </para>
      </listitem>

      <listitem>
        <para>
          We're pulling a message from the query parameters (yes, this is a
          superbly bad idea in production!).
        </para>
      </listitem>

      <listitem>
        <para>
          We're returning an array of values that will get processed later.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      We return a <classname>ViewModel</classname>. The view layer will use this
      when rendering the view, pulling variables and the template name from it.
      By default, you can omit the template name, and it will resolve to
      "lowercase-controller-name/lowercase-action-name". However, you can
      override this to specify something different by calling
      <methodname>setTemplate()</methodname> on the
      <classname>ViewModel</classname> instance. Typically, templates will
      resolve to files with a ".phtml" suffix in your module's
      <filename>view</filename> directory.
    </para>

    <para>
      So, with that in mind, let's create a view script.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-view-script">
    <info><title>Create a view script</title></info>

    <para>
      Create the directory <filename>view/hello</filename>.  Inside that
      directory, create a file named <filename>world.phtml</filename>. Inside
      that, paste in the following:
    </para>

    <programlisting language="php"><![CDATA[
<h1>Greetings!</h1>

<p>You said "<?php echo $this->escape($foo) ?>".</p>
]]></programlisting>

    <para>
      That's it. Save the file.
    </para>

    <note>
      <para>
        What is the method <methodname>escape()</methodname>? It's actually a
        <link linkend="zend.view.helpers">view helper</link>, and it's designed
        to help mitigate from <acronym>XSS</acronym> attacks. Never trust user
        input; if you are at all uncertain about the source of a given variable
        in your view script, escape it.
      </para>
    </note>
  </section>

  <section xml:id="zend.mvc.quick-start.create-a-route">
    <info><title>Create a route</title></info>

    <para>
      Now that we have a controller and a view script, we need to create
      a route to it.
    </para>

    <note>
      <para>
        <classname>ZendSkeletonApplication</classname> ships with a "default
        route" that will likely get you to this action. That route
        basically expects "/{controller}/{action}", which allows
        you to specify this: "/zend-user-hello/world". We're
        going to create a route here mainly for illustration purposes, as
        creating explicit routes is a recommended practice.
        The application will look for a 
        <classname>Zend\Mvc\Router\RouteStack</classname> instance to setup
        routing. The default generated router is a 
        <classname>Zend\Mvc\Router\Http\TreeRouteStack</classname>.
      </para>
    </note>

    <para>
      Open your <filename>configs/module.config.php</filename> file, and
      modify it to add to the "routes" parameters so it reads as
      follows:
    </para>

    <programlisting language="php"><![CDATA[
return array(
    'di' => array(
        'instance' => array(
            'Zend\Mvc\Router\RouteStack' => array(
                'parameters' => array(
                    'routes' => array(
                        '<module name>-hello-world' => array(
                            'type'    => `Zend\Mvc\Router\Http\Literal`,
                                'options' => array(
                                'route' => '/hello/world',
                                'defaults' => array(
                                    'controller' => '<module namespace>\Controller\HelloController',
                                    'action'     => 'world',
                                ),
                            ),
                        ),
                    ),
                ),
            ),
        ),
        // ... other di configuration ...
    ),
);
]]></programlisting>
  </section>

  <section xml:id="zend.mvc.quick-start.tell-the-application-about-our-module">
    <info><title>Tell the application about our module</title></info>

    <para>
      One problem: we haven't told our application about our new module!
    </para>

    <para>
      By default, modules are not parsed unless we tell the module
      manager about them. As such, we need to notify the application
      about them.
    </para>

    <para>
      Remember the <filename>config/application.config.php</filename>
      file? Let's modify it to add our new module. Once done, it should
      read as follows:
    </para>

    <programlisting language="php"><![CDATA[
<?php
return array(
    'modules' => array(
        'Application',
        '<module namespace>',
    ),
    'module_listener_options' => array( 
        'module_paths' => array(
            './module',
            './vendor',
        ),
    ),
);
]]></programlisting>

    <para>
      Replace <varname>&lt;module namespace&gt;</varname> with the
      namespace of your module.
    </para>
  </section>

  <section xml:id="zend.mvc.quick-start.test-it-out">
    <info><title>Test it out!</title></info>

    <para>
      Now we can test things out! Create a new vhost pointing its
      document root to the <filename>public</filename> directory of your
      application, and fire it up in a browser. You should see a simple
      page with these details:
    </para>

    <programlisting language="php"><![CDATA[
Module:     Application
Controller: Index
Action:     index
]]></programlisting>

    <para>
      Now alter the location in your URL to append the path
      "hello/world", and load the page. You should now get the
      following content:
    </para>

    <programlisting language="html"><![CDATA[
<h1>Greetings!</h1>

<p>You said "foo".</p>
]]></programlisting>

    <para>
      Now alter the location to append "?message=bar" and load
      the page. You should now get:
    </para>

    <programlisting language="html"><![CDATA[
<h1>Greetings!</h1>

<p>You said "bar".</p>
]]></programlisting>

    <para>
      Congratulations! You've created your first ZF2 MVC module!
    </para>
  </section>
</section>
