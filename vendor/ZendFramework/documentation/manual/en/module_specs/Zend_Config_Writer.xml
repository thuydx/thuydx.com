<?xml version="1.0" encoding="utf-8"?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" 
    xml:id="zend.config.writer">
    <info><title>Zend\Config\Writer</title></info>

    <para>
        <classname>Zend\Config\Writer</classname> gives you the ability to write config
        files out of array, <classname>Zend\Config\Config</classname> and any Traversable object. The <classname>Zend\Config\Writer</classname>
        is an interface that defines two methods: <methodname>toFile()</methodname> and <methodname>toString()</methodname>.
        We have three specific writers that implement this interface:
    </para>

    <itemizedlist>
        <listitem>
            <para>
                <classname>Zend\Config\Writer\Ini</classname>
            </para>
        </listitem>
        <listitem>
            <para>
                <classname>Zend\Config\Write\Xml</classname>
            </para>
        </listitem>
        <listitem>
            <para>
                <classname>Zend\Config\Write\PhpArray</classname>
            </para>
        </listitem>
    </itemizedlist>
    
    <section xml:id="zend.config.writer.ini">
        <info><title>Zend\Config\Writer\Ini</title></info>
        
        <para>
            The <acronym>INI</acronym> writer has two modes for rendering with regard to sections.
            By default the top-level configuration is always written into section names.
            By calling <command>$writer-&gt;setRenderWithoutSectionsFlags(true);</command> all options are written
            into the global namespace of the <acronym>INI</acronym> file and no sections are applied.
        </para>

        <para>
            As an addition <classname>Zend\Config\Writer\Ini</classname> has an additional
            option parameter <emphasis>nestSeparator</emphasis>, which defines with which
            character the single nodes are separated. The default is a single dot,
            like it is accepted by <classname>Zend\Config\Reader\Ini</classname> by default.
        </para>

        <para>
            When modifying or creating a <classname>Zend\Config\Config</classname> object, there are
            some things to know. To create or modify a value, you simply say set
            the parameter of the <classname>Config</classname> object via the parameter
            accessor (<emphasis>-&gt;</emphasis>). To create a section in the root or to
            create a branch, you just create a new array
            ("<command>$config-&gt;branch = array();</command>").
        </para>
        
        <example xml:id="zend.config.writer.ini.example">
            <info><title>Using Zend\Config\Writer\Ini</title></info>
            
            <para>
                This example illustrates the basic use of <classname>Zend\Config\Writer\Ini</classname>
                to create a new config file:
            </para>
                
            <programlisting language="php"><![CDATA[
// Create the config object
$config = new Zend\Config\Config(array(), true);
$config->production = array();

$config->production->webhost = 'www.example.com';
$config->production->database = array();
$config->production->database->params = array();
$config->production->database->params->host = 'localhost';
$config->production->database->params->username = 'production';
$config->production->database->params->password = 'secret';
$config->production->database->params->dbname = 'dbproduction';

$writer = new Zend\Config\Writer\Ini();
echo $writer->toString($config);
]]></programlisting>
            
            <para>
                The result of this code is an INI string contains the following values:
            </para>
            
            <programlisting language="ini"><![CDATA[
[production]
webhost = "www.example.com"
database.params.host = "localhost"
database.params.username = "production"
database.params.password = "secret"
database.params.dbname = "dbproduction"
]]></programlisting>
            
            <para>
                You can use the method <methodname>toFile()</methodname> to store the INI data in a file.
            </para>
        </example>
    </section>    

    <section xml:id="zend.config.writer.xml">
        <info><title>Zend\Config\Writer\Xml</title></info>
        
        <para>
            The <classname>Zend\Config\Writer\Xml</classname>can be used to generate an XML string or file
            starting from a <classname>Zend\Config\Config</classname> object.
        </para>
            
        <example xml:id="zend.config.writer.xml.example">
            <info><title>Using Zend\Config\Writer\Ini</title></info>
            
            <para>
                This example illustrates the basic use of <classname>Zend\Config\Writer\Xml</classname>
                to create a new config file:
            </para>
                
            <programlisting language="php"><![CDATA[
// Create the config object
$config = new Zend\Config\Config(array(), true);
$config->production = array();

$config->production->webhost = 'www.example.com';
$config->production->database = array();
$config->production->database->params = array();
$config->production->database->params->host = 'localhost';
$config->production->database->params->username = 'production';
$config->production->database->params->password = 'secret';
$config->production->database->params->dbname = 'dbproduction';

$writer = new Zend\Config\Writer\Xml();
echo $writer->toString($config);
]]></programlisting>
            
            <para>
                The result of this code is an XML string contains the following data:
            </para>
            
            <programlisting language="xml"><![CDATA[
<?xml version="1.0" encoding="UTF-8"?>
<zend-config>
    <production>
        <webhost>www.example.com</webhost>
        <database>
            <params>
                <host>localhost</host>
                <username>production</username>
                <password>secret</password>
                <dbname>dbproduction</dbname>
            </params>
        </database>
    </production>
</zend-config>
]]></programlisting>
            
            <para>
                You can use the method <methodname>toFile()</methodname> to store the XML data in a file.
            </para>
        </example>    
        
    </section>
    
    <section xml:id="zend.config.writer.phparray">
        <info><title>Zend\Config\Writer\PhpArray</title></info>
        
        <para>
            The <classname>Zend\Config\Writer\PhpArray</classname>can be used to generate a PHP code
            that returns an array representation of an <classname>Zend\Config\Config</classname> object.
        </para>
            
        <example xml:id="zend.config.writer.phparray.example">
            <info><title>Using Zend\Config\Writer\PhpArray</title></info>
            
            <para>
                This example illustrates the basic use of <classname>Zend\Config\Writer\PhpArray</classname>
                to create a new config file:
            </para>
                
            <programlisting language="php"><![CDATA[
// Create the config object
$config = new Zend\Config\Config(array(), true);
$config->production = array();

$config->production->webhost = 'www.example.com';
$config->production->database = array();
$config->production->database->params = array();
$config->production->database->params->host = 'localhost';
$config->production->database->params->username = 'production';
$config->production->database->params->password = 'secret';
$config->production->database->params->dbname = 'dbproduction';

$writer = new Zend\Config\Writer\PhpArray();
echo $writer->toString($config);
]]></programlisting>
            
            <para>
                The result of this code is a PHP script that returns an array as follow:
            </para>
            
            <programlisting language="php"><![CDATA[
<?php
return array (
  'production' => 
  array (
    'webhost' => 'www.example.com',
    'database' => 
    array (
      'params' => 
      array (
        'host' => 'localhost',
        'username' => 'production',
        'password' => 'secret',
        'dbname' => 'dbproduction',
      ),
    ),
  ),
);
]]></programlisting>
            
            <para>
                You can use the method <methodname>toFile()</methodname> to store the PHP script in a file.
            </para>
        </example>
    </section>
</section>
