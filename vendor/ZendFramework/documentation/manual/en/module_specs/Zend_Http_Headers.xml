<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="zend.http.headers">
    <info>
        <title>Zend\Http\Headers And The Various Header Classes</title>
    </info>

    <section xml:id="zend.http.headers.intro">
        <info>
            <title>Overview</title>
        </info>

        <para>
            The <classname>Zend\Http\Headers</classname> class is a container for HTTP headers.  It
            is typically accessed as part of a <classname>Zend\Http\Request</classname> or
            <classname>Zend\Http\Response</classname> <methodname>header()</methodname> call.  The
            Headers container will lazily load actual Header objects as to reduce the overhead of
            header specific parsing.
        </para>

        <para>
            The <classname>Zend\Http\Header\*</classname> classes are the domain specific
            implementations for the various types of Headers that one might encounter during the
            typical HTTP request.  If a header of unknown type is encountered, it will be
            implemented as a <classname>Zend\Http\Header\GenericHeader</classname> instance.  See
            the below table for a list of the various HTTP headers and the API that is specific to
            each header type.
        </para>

        <!--
        <para>
            In general, the Headers
            container object cares not about the context that it is being used within (whether it is request or
            response), so it is up to the consumer to apply the appropriate Header
        </para>
        -->
    </section>

    <section xml:id="zend.http.headers.quick-start">
        <info>
            <title>Quick Start</title>
        </info>

        <para>
            The quickest way to get started interacting with header objects is by getting an already populated
            Headers container from a request or response object.
        </para>
    </section>

    <section xml:id="zend.http.headers.options">
        <info>
            <title>Configuration Options</title>
        </info>

        <para>
            None currently available.
        </para>

        <!--
        <variablelist>
            <title/>
        </variablelist>
        -->
    </section>

    <section xml:id="zend.http.headers.methods">
        <info>
            <title>Available Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.http.headers.methods.from-string">
                <term>Headers::fromString</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>Headers::fromString</methodname>
                        <methodparam>
                            <funcparams>string $string</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Populates headers from string representation</para>
                    <para>
                        Parses a string for headers, and aggregates them, in order, in the current
                        instance, primarily as strings until they are needed (they will be lazy
                        loaded).
                    </para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.set-plugin-class-loader">
                <term>setPluginClassLoader</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>setPluginClassLoader</methodname>
                        <methodparam>
                            <funcparams>Zend\Loader\PluginClassLocator $pluginClassLoader</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Set an alternate implementation for the plugin class loader</para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.get-plugin-class-loader">
                <term>getPluginClassLoader</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>getPluginClassLoader</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>
                        Return an instance of a
                        <classname>Zend\Loader\PluginClassLocator</classname>, lazyload and inject
                        map if necessary.
                    </para>
                    <para>Returns <classname>Zend\Loader\PluginClassLocator</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.add-headers">
                <term>addHeaders</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>addHeaders</methodname>
                        <methodparam>
                            <funcparams>array|Traversable $headers</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Add many headers at once</para>
                    <para>Expects an array (or <classname>Traversable</classname> object) of type/value pairs.</para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.add-header-line">
                <term>addHeaders</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>addHeaderLine</methodname>
                        <methodparam>
                            <funcparams>string $headerFieldNameOrLine, string $fieldValue</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Add a raw header line, either in name =&gt; value, or as a single string 'name: value'</para>
                    <para>
                        This method allows for lazy-loading in that the parsing and instantiation of Header object
                        will be delayed until they are retrieved by either
                        <methodname>get()</methodname> or <methodname>current()</methodname>.
                    </para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.add-header">
                <term>addHeader</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>addHeader</methodname>
                        <methodparam>
                            <funcparams>Zend\Http\Header\HeaderDescription $header</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>
                        Add a Header to this container, for raw values see
                        <methodname linkend="zend.http.headers.methods.add-header-line">addHeaderLine()</methodname> and
                        <methodname linkend="zend.http.headers.methods.add-headers">addHeaders()</methodname>.
                    </para>
                    <para></para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.remove-header">
                <term>removeHeader</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>removeHeader</methodname>
                        <methodparam>
                            <funcparams>Zend\Http\Header\HeaderDescription $header</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Remove a Header from the container</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.clear-headers">
                <term>clearHeaders</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>clearHeaders</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Clear all headers</para>
                    <para>Removes all headers from queue</para>
                    <para>Returns <classname>Zend\Http\Headers</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.get">
                <term>get</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>get</methodname>
                        <methodparam>
                            <funcparams>string $name</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Get all headers of a certain name/type</para>
                    <para></para>
                    <para>Returns
                        false|<classname>Zend\Http\Header\HeaderDescription</classname>|<classname>ArrayIterator</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.has">
                <term>has</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>has</methodname>
                        <methodparam>
                            <funcparams>string $name</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Test for existence of a type of header</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.next">
                <term>next</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>next</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Advance the pointer for this object as an interator</para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.key">
                <term>key</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>key</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Return the current key for this object as an interator</para>
                    <para>Returns mixed</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.valid">
                <term>valid</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>valid</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Is this iterator still valid?</para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.rewind">
                <term>rewind</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>rewind</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Reset the internal pointer for this object as an iterator</para>
                    <para>Returns void</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.current">
                <term>current</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>current</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Return the current value for this iterator, lazy loading it if need be</para>
                    <para>Returns <classname>Zend\Http\Header\HeaderDescription</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.count">
                <term>count</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>count</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>
                        Return the number of headers in this container. If all headers have not been
                        parsed, actual count could increase if MultipleHeader objects exist in the
                        Request/Response. If you need an exact count, iterate.
                    </para>
                    <para>Returns int</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.to-string">
                <term>toString</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>toString</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Render all headers at once</para>
                    <para>
                        This method handles the normal iteration of headers; it is up to the
                        concrete classes to prepend with the appropriate status/request line.
                    </para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.to-array">
                <term>toArray</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>toArray</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Return the headers container as an array</para>
                    <para>Returns array</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.headers.methods.force-loading">
                <term>forceLoading</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>forceLoading</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>
                        By calling this, it will force parsing and loading of all headers, after
                        this <methodname>count()</methodname> will be accurate
                    </para>
                    <para>Returns bool</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section xml:id="zend.http.headers.examples">
        <info>
            <title>Examples</title>
        </info>

        <para></para>
    </section>

    <section xml:id="zend.http.headers.header-description">
        <info>
            <title>Zend\Http\Header\* Base Methods</title>
        </info>

        <variablelist>
            <varlistentry xml:id="zend.http.header.generic-header.methods.from-string">
                <term>fromString</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>fromString</methodname>
                        <methodparam>
                            <funcparams>string $headerLine</funcparams>
                        </methodparam>
                    </methodsynopsis>
                    <para>Factory to generate a header object from a string</para>
                    <para>Returns <classname>Zend\Http\Header\GenericHeader</classname></para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.header.generic-header.methods.get-field-name">
                <term>getFieldName</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>getFieldName</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Retrieve header field name</para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.header.generic-header.methods.get-field-value">
                <term>getFieldValue</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>getFieldValue</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Retrieve header field value</para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>

            <varlistentry xml:id="zend.http.header.generic-header.methods.to-string">
                <term>toString</term>
                <listitem>
                    <methodsynopsis>
                        <methodname>toString</methodname>
                        <void/>
                    </methodsynopsis>
                    <para>Cast to string as a well formed HTTP header line</para>
                    <para>Returns in form of "NAME: VALUE\r\n"</para>
                    <para>Returns string</para>
                </listitem>
            </varlistentry>
        </variablelist>
    </section>

    <section xml:id="zend.http.header-types.list">
        <info>
            <title>List of Http Header Types</title>
        </info>

        <table frame='all'>
            <title>Zend\Http\Header\* Classes</title>

            <tgroup cols='5' align='left' colsep='1' rowsep='1'>
                <thead>
                    <row>
                        <entry>Class Name</entry>
                        <entry>Additional Methods</entry>
                    </row>
                </thead>
                <tbody>
                    <row>
                        <entry>Accept</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>AcceptCharset</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>AcceptEncoding</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>AcceptLanguage</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>AcceptRanges</entry>
                        <entry>
                            <para>getRangeUnit() / setRangeUnit() - The range unit of the accept ranges header</para>
                        </entry>
                    </row>
                    <row>
                        <entry>Age</entry>
                        <entry>getDeltaSeconds() / setDeltaSeconds() - The age in delta seconds</entry>
                    </row>
                    <row>
                        <entry>Allow</entry>
                        <entry>getAllowedMethods() / setAllowedMethods() - An array of allowed methods</entry>
                    </row>
                    <row>
                        <entry>AuthenticationInfo</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Authorization</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>CacheControl</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Connection</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentDisposition</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentEncoding</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentLanguage</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentLength</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentLocation</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentMD5</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentRange</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ContentType</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Cookie</entry>
                        <entry>
                            <para>Extends \ArrayObject</para>
                            <para>setEncodeValue() / getEncodeValue() - Whether or not to encode values</para>
                        </entry>
                    </row>
                    <row>
                        <entry>Date</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Etag</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Expect</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Expires</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>From</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Host</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>IfMatch</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>IfModifiedSince</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>IfNoneMatch</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>IfRange</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>IfUnmodifiedSince</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>KeepAlive</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>LastModified</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Location</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>MaxForwards</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Pragma</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ProxyAuthenticate</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>ProxyAuthorization</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Range</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Referer</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Refresh</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>RetryAfter</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Server</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>SetCookie</entry>
                        <entry>
                            <para>getName() / setName() - The cookies name</para>
                            <para>getValue() / setValue() - The cookie value</para>
                            <para>getDomain() / setDomain() - The domain the cookie applies to</para>
                            <para>getExpires() / setExpires() - The time frame the cookie is valid for, null is a session cookie</para>
                            <para>getPath() / setPath() - The uri path the cookie is bound to</para>
                            <para>isSecure() / setSecure() - Whether the cookies contains the Secure flag</para>
                            <para>isHttponly() / setHttponly() - Whether the cookies can be accessed via HTTP only</para>
                        </entry>
                    </row>
                    <row>
                        <entry>TE</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Trailer</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>TransferEncoding</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Upgrade</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>UserAgent</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Vary</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Via</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>Warning</entry>
                        <entry>N/A</entry>
                    </row>
                    <row>
                        <entry>WWWAuthenticate</entry>
                        <entry>N/A</entry>
                    </row>
                </tbody>
            </tgroup>
        </table>
    </section>
</section>
