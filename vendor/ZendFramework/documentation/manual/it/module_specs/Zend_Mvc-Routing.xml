<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section 
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xml:id="zend.mvc.routing">
  <info><title>Routing</title></info>

  <para>Il Routing è l'atto di far corrispondere ad una richiesta un preciso controller.</para>

  <para>Tipicamente, il routing esaminerà la richiesta URI e si occuperà
    di fare il "match" dell'URI path sulle regole configurate. Se il set di 
    regole combacia allora un controller sarà eseguito.
    Il routing può essere utilizzato per altre porzioni della richiesta URI
    o dell'ambiente -- Per esempio: lo schema o l'host, i parametri della
    query, headers, metodo della chiesta e molto altro.
  </para>

  <para>Il Routing è stato riscritto dalle fondamenta per Zend Framework 2.0.
    L'esecuzione è molto simile, ma internamente lavora in modo molto
    più consistenza, performante e spesso semplice.
  </para>

  <para>
    L'unità base del routing è una classe <classname>Route</classname>:
  </para>

  <programlisting language="php"><![CDATA[
namespace Zend\Mvc\Router;

use zend\Stdlib\RequestDescription as Request;

interface Route
{
    public static function factory(array $options = array());
    public function match(Request $request);
    public function assemble(array $params = array(), array $options = array());
}
]]></programlisting>

  <para>
    Una <classname>Route</classname> accatta una <classname>Request</classname>,
    e determina se ne può fare il match. Se può, ritorna un oggetto
    <classname>RouteMatch</classname>:
  </para>

  <programlisting language="php"><![CDATA[
namespace Zend\Mvc\Router;

class RouteMatch
{
    public function __construct(array $params);
    public function setParam($name, $value);
    public function merge(RouteMatch $match);
    public function getParam($name, $default = null);
    public function getRoute();
}
]]></programlisting>

  <para>
    Tipicamente quando una <classname>Route</classname> corrisponde, 
    questa definisce uno o più parametri. Questi sono passati ad un
    <classname>RouteMatch</classname>, altri oggetti possono
    chiedere a <classname>RouteMatch</classname> i suoi valori.
  </para>

  <programlisting language="php"><![CDATA[
$id = $routeMatch->getParam('id', false);
if (!$id) {
    throw new Exception('Required identifier is missing!');
}
$entity = $resource->get($id);
]]></programlisting>

  <para>
    Spesso avrai tante "route" che vorrai controllare. Per facilitare
    questa operazione puoi utilizzare un aggregatore di "route", 
    tipicamente implementando <classname>RouteStack</classname>:
  </para>

  <programlisting language="php"><![CDATA[
namespace Zend\Mvc\Router;

interface RouteStack extends Route
{
    public function addRoute($name, $route, $priority = null);
    public function addRoutes(array $routes);
    public function removeRoute($name);
}
]]></programlisting>

  <para>
    Tipicamente, le "route" dovrebbero essere richieste in un ordine
    di tipo LIFO (Last In First Out [Il primo ad entrare è il primo ad uscire][n.d.t.]),
    questa è la ragione dietro al nome <classname>RouteStack</classname>.
    Zend Framework concede due implementazione di questa interfaccia:
    <classname>SimpleRouteStack</classname>, <classname>TreeRoueStack</classname>.
    In ognuna, registri le "route" una alla volta utilizzando il metodo
    <methodname>addRoute()</methodname>, o in "bulk" usando 
    <methodname>addRoutes()</methodname>.
  </para>

  <programlisting language="php"><![CDATA[
// One at a time:
$route = Literal::factory(array(
    'route' => '/foo',
    'defaults' => array(
        'controller' => 'foo-index',
        'action'     => 'index',
    ),
));
$router->addRoute('foo', $route);

$router->addRoutes(array(
    // using already instantiated routes:
    'foo' => $route,

    // providing configuration to allow lazy-loading routes:
    'bar' => array(
        'type' => 'literal',
        'options' => array(
            'route' => '/bar',
            'defaults' => array(
                'controller' => 'bar-index',
                'action'     => 'index',
            ),
        ),
    ),
));
]]></programlisting>

  <section xml:id="zend.mvc.routing.router-types">
    <info><title>Tipi di Router</title></info>

    <para>Sono forniti due "router", il<classname>SimpleRouteStack</classname>
     e <classname>TreeRouteStack</classname>. Ognuno lavoro con la precedente
     interfaccia, ma utilizza differenti opzioni e path di esecuzione.
    </para>

    <section xml:id="zend.mvc.routing.router-types.simple-route-stack">
      <info><title>SimpleRouteStack</title></info>

      <para>
        Questo router semplicemente raccoglie le "route" individuali e 
        ne fornisce la logica di confronto in uno step e cicla attraverso
        questi element nell'ordine LIFO finchè un confronto non è positivo.
        Per questo, "route" positive molto spesso dovrebbero essere 
        regisdtrate per ultime e le "route" meno frequenti per prime.
        In aggiunta, bisognerebbe essere sicuri che le "route" che 
        potenzialmente sovrascrivono le "route" già registrate siano
        le più specifiche possibili (es. registrate per ultime). In alternativa
        puoi fornire una priorità con un terzo parametro al metodo
        <methodname>addRoute()</methodname>, specificando la priorità
        oppure impostando la proprietà nell'instanza prima di aggiungere
        una nuova route allo stack.
      </para>
    </section>

    <section xml:id="zend.mvc.routing.router-types.tree-route-stack">
      <info><title>TreeRouteStack</title></info>

      <para>
        <classname>Zend\Mvc\Router\Http\TreeRouteStack</classname> fornisce 
        l'attitudine di registrare alberi di "route", e utilizzerà un
        algoritmo B-tree (albero bilanciato [n.d.t.]) per confrontare
        le strade. Così puoi registrare una singola "route" con molte
        "foglie".
      </para>

      <para>
        Una <classname>TreeRouteStack</classname> consiste in una delle 
        seguenti configurazioni:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            Una "route" di base, che descrive la base di confronto
            richiesta, la radice dell'albero.
          </para>
        </listitem>

        <listitem>
          <para>
            Un opzionale "route_broker", che è 
            <classname>Zend\Mvc\Router\RouteBroker</classname> che può 
            caricare in modo debole le strade (lazy-loading).
          </para>
        </listitem>

        <listitem>
          <para>
            L'opzione "may_terminate" che informa il router che
            non deve seguire altri segmenti.
          </para>
        </listitem>

        <listitem>
          <para>
            Un array opzionale "child_routes" che contiene le strade
            addizionali che partona dalla "route" base (es. costruite 
            da questa). Ogni route "figlio" può essere a sua volta una
            <classname>TreeRouteStack</classname> se lo desideri, 
            infatti la "route" <classname>Part</classname> lavora esattamente
            in questo modo.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Quando una "route" confronta in positivo su un <classname>TreeRouteStack</classname>,
        Il parametro di confronto per ogni segmento dell'albero sarà
        ritornato.
      </para>

      <para>
        Un <classname>TreeRouteStack</classname> può essere il tuo solo
        sistema di "route" per la tua applicazione, oppure può descriverne
        particolari segmenti.
      </para>

      <para>
        Un esempio di un <classname>TreeRouteStack</classname> è fornito
        nella documentazione della "route" <classname>Part</classname>.
      </para>
    </section>
  </section>

  <section xml:id="zend.mvc.routing.route-types">
    <info><title>Tipi di Route</title></info>

    <para>
      Zend Framework 2.0 è fornito con i seguenti tipi di "route".
    </para>

    <section xml:id="zend.mvc.routing.route-types.hostname">
      <info><title>Zend\Mvc\Router\Http\Hostname</title></info>

      <para>
        La <classname>Hostname</classname> route cerca di far corrispondere
        un hostname registrato nella richista su uno specifico criterio.
        Tipicamente sarà fornito in una delle seguenti forme:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            "subdomain.domain.tld"
          </para>
        </listitem>

        <listitem>
          <para>
            ":subdomain.domain.tld"
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Nel precedente esempio, la seconda strada ritorna una chiave
        "subdomain" come parte della route confrontata.
      </para>

      <para>
        Per ogni segmento hostname gestito puoi fornirne un obbligo.
        Per esempio, se il segmento "subdomain" deve iniziare 
        con "fw"  e contenere esattamente due cifre, la seguente 
        strada deve essere fornita:
      </para>

      <programlisting language="php"><![CDATA[
$route = Hostname::factory(array(
    'route' => ':subdomain.domain.tld',
    'constraints' => array(
        'subdomain' => 'fw\d{2}'
    ),
));
]]></programlisting>

      <para>
        Nel precedente esempio solo la chiave "submodule" sarà 
        ritornata nel <classname>RouteMatch</classname>. Se vuoi
        puoi fornire altre informazioni di base per il confronto, o 
        se vuoi dei valori di default di ritorno per "subdomain" 
        hai bisogno di fornirli. 
      </para>

      <programlisting language="php"><![CDATA[
$route = Hostname::factory(array(
    'route' => ':subdomain.domain.tld',
    'constraints' => array(
        'subdomain' => 'fw\d{2}'
    ),
    'defaults' => array(
        'type' => 'json',
    ),
));
]]></programlisting>

      <para>
        Quando viene eseguito il "match", la regola precedente
        ritorna due chiavi nel <classname>RouteMatch</classname>,
        "subdomain" e "type".
      </para>
    </section>

    <section xml:id="zend.mvc.routing.route-types.literal">
      <info><title>Zend\Mvc\Router\Http\Literal</title></info>

      <para>
        La <classname>Literal</classname> è stata fatta per confrontare
        esattamente il segmento URI. La configurazione infatti è solo 
        la strada che vuoi confrontare, parametri di default o parametri
        che vuoi in ritorno sul "match".
      </para>

      <programlisting language="php"><![CDATA[
$route = Literal::factory(array(
    'route' => '/foo',
    'defaults' => array(
        'controller' => 'foo-index',
    ),
));
]]></programlisting>

      <para>
        La precedente "route" confronta il path "/foo" e ritorna
        la chiave "controller" nel <classname>RouteMatch</classname>,
        con il valore "foo-index".
      </para>
    </section>

    <section xml:id="zend.mvc.routing.route-types.part">
      <info><title>Zend\Mvc\Router\Http\Part</title></info>

      <para>
        Una "route" <classname>Part</classname> permette di 
        percorrere l'albero delle possibili strade basandosi su un
        segmento dell'URI path. Questa attualmente estende il
        <classname>TreeRouteStack</classname>.
      </para>

      <para>
        "Route" <classname>Part</classname> è difficile da descrivere, ne 
        facciamo un esempio qui.
      </para>

      <programlisting language="php"><![CDATA[
$route = Part::factory(array(
    'route' => array(
        'type'    => 'literal',
        'options' => array(
            'route'    => '/',
            'defaults' => array(
                'controller' => 'ItsHomePage',
            ),
        )
    ),
    'may_terminate' => true,
    'route_broker'  => $routeBroker,
    'child_routes'  => array(
        'blog' => array(
            'type'    => 'literal',
            'options' => array(
                'route'    => 'blog',
                'defaults' => array(
                    'controller' => 'ItsBlog',
                ),
            ),
            'may_terminate' => true,
            'child_routes'  => array(
                'rss' => array(
                    'type'    => 'literal',
                    'options' => array(
                        'route'    => '/rss',
                        'defaults' => array(
                            'controller' => 'ItsRssBlog',
                        ),
                    ),
                    'child_routes'  => array(
                        'sub' => array(
                            'type'    => 'literal',
                            'options' => array(
                                'route'    => '/sub',
                                'defaults' => array(
                                    'action' => 'ItsSubRss',
                                ),
                            )
                        ),
                    ),
                ),
            ),
        ),
        'forum' => array(
            'type'    => 'literal',
            'options' => array(
                'route'    => 'forum',
                'defaults' => array(
                    'controller' => 'ItsForum',
                ),
            ),
        ),
    ),
));
]]></programlisting>

      <para>
        Il precedente esempio confronta i seguenti:
      </para>

      <itemizedlist>
        <listitem>
          <para>
            "/" carica il "ItsHomePage" controller
          </para>
        </listitem>

        <listitem>
          <para>
            "/blog" carica il "ItsBlog" controller
          </para>
        </listitem>

        <listitem>
          <para>
            "/blog/rss" carica il "ItsRssBlog"
            controller
          </para>
        </listitem>

        <listitem>
          <para>
            "/blog/rss/sub" carica il "ItsSubRss"
            controller
          </para>
        </listitem>

        <listitem>
          <para>
            "/forum" carica il"ItsForum" controller
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Puoi usare qualunque tipo di "route" come strada
        figlio di una "route" <classname>Part</classname>.
      </para>
    </section>

    <section xml:id="zend.mvc.routing.route-types.regex">
      <info><title>Zend\Mvc\Router\Http\Regex</title></info>

      <para>
        Una "route" <classname>Regex</classname> utilizza una espressione
        regolare per confrontare un path URI. Qualunque espressione
        regolare è permessa; la nostra raccomandazione è di usare 
        i nomi da catturare di ogni valore che si vuole in ritorno
        <classname>RouteMatch</classname>. 
      </para>

      <para>
        Le "route" basate sulle espressioni regolari sono spesso complesse, 
        puoi specificare una "spec" o specifica da usare quando costruisci
        un URL da una espressione regolare. La specifica è semplicemente 
        una stringa, i rimpiazzamenti sono identificati utilizzando "%keyname%"
        nella stringa, le chiavi per tutti i valori catturati o parametri
        con il nome sono passati al metodo <methodname>assemble()</methodname>.
      </para>

      <para>
        Come tutte le altre "route", la "route" <classname>Regex</classname>
        può accettare valori di default, ovvero parametri che vengono
        inclusi nella risposta <classname>RouteMatch</classname> quando
        sono confrontati positivamente. 
      </para>

      <programlisting language="php"><![CDATA[
$route = Regex::factory(array(
    'regex' => '/blog/(?<id>[a-zA-Z0-9_-]+)(\.(?<format>(json|html|xml|rss)))?',
    'defaults' => array(
        'controller' => 'blog-entry',
        'format'     => 'html',
    ),
    'spec' => '/blog/%id%.%format%',
));
]]></programlisting>

      <para>
        La precedente si realizza con
        "/blog/001-some-blog_slug-here.html", e ritorna tre
        oggetti nel <classname>RouteMatch</classname>: un "id", 
        un controller ed un "format". Quando assembli una URL da questa
        strada, l'id e il "format" dovranno essere passati per
        riempire la specifica.  
      </para>
    </section>

    <section xml:id="zend.mvc.routing.route-types.scheme">
      <info><title>Zend\Mvc\Router\Http\Scheme</title></info>

      <para>
        La "route" <classname>Scheme</classname> confronta solo lo
        schema dello URI e devono essere esatti. Questa "route" e simile alla
        "route" <classname>Literal</classname>, semplicemente prende quello
        che vuoi da confrontare ed i default, ovvero i parametri da ritornare
        sul confronto. 
      </para>

      <programlisting language="php"><![CDATA[
$route = Scheme::factory(array(
    'scheme' => 'https',
    'defaults' => array(
        'https' => true,
    ),
));
]]></programlisting>

      <para>
        La precedente "route" confronta se lo schema "https" 
        è presente, in questo caso sarà ritornata la chiave
        "https" nel <classname>RouteMatch</classname> con un
        valore booleano <varname>true</varname>.
      </para>
    </section>

    <section xml:id="zend.mvc.routing.route-types.segment">
      <info><title>Zend\Mvc\Router\Http\Segment</title></info>

      <para>
        Una "route" <classname>Segment</classname> permette di confrontare
        un qualunque segmento di un URI path. I segmenti sono delineati
        dall'utilizzo della virgola, seguita da un carattere alfanumerico.
        Se un segmento è opzionale dovrà essere inglobato dalle parentesi quadre.
        Un esempio: "/:foo[/:bar]" si realizza su un "/" seguito dal testo e 
        assegnato ad una chiave "foo"; se è presente un successivo carattere
        "/" un qualunque testo successivo sarà assegnato alla chiave "bar".
      </para>

      <para>
        La separazione tra "literal" e un nome del segmento può essere
        quanlunque cosa. Per esempio la precedente può essere realizzata
        anche come: "/:foo{-}[-:bar]". La sequenza {-} dopo il parametro :foo
        indica un set di uno o più delimitatori.
      </para>

      <para>
        Ogni segmento può avere un obbligo associato. Ogni obbligo
        è semplicemente una espressione regolare che indica la condizione
        sotto la quale il segmento deve rimanere.
      </para>

      <para>
        Come per le altre "route", puoi indicare dei valori di default 
        da utilizzare. Questi sono particolarmente utili quando hai dei
        segmenti opzionali.
      </para>

      <para>
        Un esempio complesso:
      </para>

      <programlisting language="php"><![CDATA[
$route = Segment::factory(array(
    'route' => '/:controller[/:action]',
    'constraints' => array(
        'controller' => '[a-zA-Z][a-zA-Z0-9_-]+',
        'action'     => '[a-zA-Z][a-zA-Z0-9_-]+',
    ),
    'defaults' => array(
        'controller' => 'application-index',
        'action'     => 'index',
    ),
));
]]></programlisting>
    </section>
  </section>
</section>
