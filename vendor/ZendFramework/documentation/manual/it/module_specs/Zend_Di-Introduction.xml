<?xml version="1.0" encoding="UTF-8"?>
<!-- Reviewed: no -->
<section
    xmlns="http://docbook.org/ns/docbook" version="5.0"
    xmlns:xlink="http://www.w3.org/1999/xlink"
    xml:id="zend.di.intro">
    <info><title>Introduzione a Zend\Di</title></info>

    <section xml:id="zend.di.intro.di">
        <info><title>Dependency Injection (Iniezione delle dipendenze)</title></info>
        <para>
            Dependency Injection (chiamata DI)  è un concetto che viene 
            navigato molto e discusso sul web. Semplicemente, vogliamo
            spiegare che l'atto di iniettare le dipendenze è semplice
            come nell'esempio successivo:
        </para>

        <programlisting language="php"><![CDATA[
$b = new MovieLister(new MovieFinder));
]]></programlisting>

        <para>
            Sopra, MovieFinder è una dipendenza di MovieLister e Movie Finder è iniettato dentro MovieLister. Se non
            ti è familiare il concetto di DI, qui ci sono un paio di ottime letture: 
            <link xlink:href="http://weierophinney.net/matthew/archives/260-Dependency-Injection-An-analogy.html">Matthew
            Weier O'Phinney's Analogy</link>,
            <link xlink:href="http://ralphschindler.com/2011/05/18/learning-about-dependency-injection-and-php">Ralph
            Schindler's Learning DI</link>, oppure
            <link xlink:href="http://fabien.potencier.org/article/11/what-is-dependency-injection">Fabien
            Potencier's Series</link> su DI.
        </para>
    </section>


    <section xml:id="zend.di.intro.dic">
        <info><title>Dependency Injection Containers (Contenitori DI)</title></info>

        <para>
            Quando il tuo codice è scritto in modo che tutte le tue dipendenze
            sono iniettate dentro gli oggetti da utilizzare, potresti scoprire
            che il semplice atto di legare gli oggetti è diventato più complesso.
            Questo questo diventa reale e tu scopri che stai creando del 
            codice ripetuto, questo allora, diventa una eccellente opportinità
            per utilizzare un Dependency Injection Container.
        </para>

        <para>
            Nella sua forma più semplice, un Dependency Injection Container 
            (che successivamente chiameremo DiC per brevità), è un oggetto
            capace di creare altri oggetti su richiesta e gestire il "legame",
            o l'iniezione delle dipendenze per gli oggetti richiesti. 
            Poichè i patterns che gli sviluppatori utilizzano nello scrivere
            del codice utile per il DI variano, i DiC sono generalmente più
            compatti rispetto ad un pattern specifico o frameworks DiC più 
            grandi.
        </para>

        <para>
            Zend\Di è un DiC framework. Mentre per il codice più semplice non
            è necessaria una configurazione ed i casi d'uso sono abbastanze semplici;
            per del codice più complicato, Zend\Di è in grado di essere configurato
            per legare questi casi d'uso complicati.  
        </para>

    </section>

</section>